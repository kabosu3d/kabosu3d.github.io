{"version":3,"sources":["ball.glb","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","gltf","useGLTF","modelPath","useFrame","scene","rotation","y","object","App","className","OrbitControls","attach","args","position","fallback","Environment","preset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAAe,MAA0B,iC,QCOzC,SAASA,IACP,IAAMC,EAAOC,YAAQC,GAErB,OADAC,aAAS,kBAAOH,EAAKI,MAAMC,SAASC,GAAK,QAClC,2BAAWC,OAAQP,EAAKI,QAmBlBI,MAjBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAACC,EAAA,EAAD,IACA,uBAAOC,OAAO,aAAaC,KAAM,CAAC,WAClC,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,eAAC,WAAD,CAAUC,SAAU,KAApB,UACE,cAACC,EAAA,EAAD,CAAaC,OAAO,WACpB,cAACjB,EAAD,aCRKkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6e0a4a00.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/ball.631059ef.glb\";","import \"./App.css\";\nimport React, { Suspense } from \"react\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useGLTF, Environment, OrbitControls } from \"@react-three/drei\";\nimport modelPath from \"./ball.glb\";\nimport { GLTF } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nfunction Model() {\n  const gltf = useGLTF(modelPath) as unknown as GLTF;\n  useFrame(() => (gltf.scene.rotation.y += 0.002));\n  return <primitive object={gltf.scene} />;\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Canvas>\n        <OrbitControls />\n        <color attach=\"background\" args={[0x333353]} />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <Suspense fallback={null}>\n          <Environment preset=\"studio\" />\n          <Model />\n        </Suspense>\n      </Canvas>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}